import React, { useState } from 'react';
import { Box, Typography, Paper, Button, Fade, Grid, Alert, Card, CardContent, LinearProgress } from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import InfoIcon from '@mui/icons-material/Info';
import BugReportIcon from '@mui/icons-material/BugReport';
import SearchIcon from '@mui/icons-material/Search';
import CodeIcon from '@mui/icons-material/Code';
import LockIcon from '@mui/icons-material/Lock';
import '../../css/Games.css';

const glassStyle = {
  background: 'rgba(255,255,255,0.7)',
  boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.18)',
  backdropFilter: 'blur(8px)',
  borderRadius: 16,
  border: '1px solid rgba(255,255,255,0.18)',
};

const FILES = [
  {
    name: 'invoice_2024.exe',
    hash: 'e99a18c428cb38d5f260853678922e03',
    size: '1.2 MB',
    clues: {
      static: 'Suspicious strings: "decrypt", "bitcoin", "keygen"',
      sandbox: 'Attempts to encrypt user files and contacts C2 server.',
      hash: 'Hash found in malware database: Ransomware.FakeInvoice',
      code: 'Obfuscated code with suspicious function calls.',
    },
    verdict: 'malicious',
    explanation: 'This file is ransomware. The static scan, sandbox, and hash check all indicate malicious behavior.',
  },
  {
    name: 'holiday_photo.jpg',
    hash: 'a5bfc9e07964f8dddeb95fc584cd965d',
    size: '2.4 MB',
    clues: {
      static: 'JPEG image header detected. No suspicious strings.',
      sandbox: 'No unusual activity. File opens as an image.',
      hash: 'Hash not found in malware database.',
      code: 'No executable code detected.',
    },
    verdict: 'benign',
    explanation: 'This is a normal image file. All analysis tools show no signs of malware.',
  },
  {
    name: 'update_patch.exe',
    hash: '45c48cce2e2d7fbdea1afc51c7c6ad26',
    size: '3.1 MB',
    clues: {
      static: 'Contains string: "admin", "update", "system32"',
      sandbox: 'Attempts to modify system files and disables antivirus.',
      hash: 'Hash found in malware database: Trojan.FakeUpdate',
      code: 'Code snippet disables security services.',
    },
    verdict: 'malicious',
    explanation: 'This file is a trojan. Sandbox and hash check both indicate malicious intent.',
  },
  {
    name: 'resume.docx',
    hash: '827ccb0eea8a706c4c34a16891f84e7b',
    size: '0.5 MB',
    clues: {
      static: 'Microsoft Word document. No macros detected.',
      sandbox: 'Opens as a document. No network activity.',
      hash: 'Hash not found in malware database.',
      code: 'No executable code found.',
    },
    verdict: 'benign',
    explanation: 'A normal Word document with no macros or suspicious activity.',
  },
  {
    name: 'funny_video.mp4',
    hash: '8f14e45fceea167a5a36dedd4bea2543',
    size: '12.7 MB',
    clues: {
      static: 'MP4 video file. No suspicious metadata.',
      sandbox: 'Plays as a video. No network or file activity.',
      hash: 'Hash not found in malware database.',
      code: 'No code present in file.',
    },
    verdict: 'benign',
    explanation: 'A harmless video file. No signs of malware.',
  },
  {
    name: 'bank_statement.pdf',
    hash: 'c9f0f895fb98ab9159f51fd0297e236d',
    size: '0.8 MB',
    clues: {
      static: 'PDF file. Contains embedded JavaScript.',
      sandbox: 'Attempts to open a hidden browser window.',
      hash: 'Hash found in malware database: PDF.Exploit.CVE-2018-4990',
      code: 'Embedded JavaScript exploits PDF reader vulnerability.',
    },
    verdict: 'malicious',
    explanation: 'This PDF exploits a known vulnerability using embedded JavaScript.',
  },
  {
    name: 'music_player_setup.exe',
    hash: 'c45147dee729311ef5b5c3003946c48f',
    size: '4.2 MB',
    clues: {
      static: 'Installer for music player. Digital signature valid.',
      sandbox: 'Installs music player. No suspicious activity.',
      hash: 'Hash not found in malware database.',
      code: 'Installer code matches official release.',
    },
    verdict: 'benign',
    explanation: 'A legitimate installer with a valid digital signature.',
  },
  {
    name: 'passwords.txt.exe',
    hash: 'd3d9446802a44259755d38e6d163e820',
    size: '0.3 MB',
    clues: {
      static: 'Suspicious .exe with .txt in name. Contains string: "stealer"',
      sandbox: 'Attempts to send data to external IP.',
      hash: 'Hash found in malware database: Stealer.PwdDump',
      code: 'Code attempts to read and exfiltrate user passwords.',
    },
    verdict: 'malicious',
    explanation: 'This is a password stealer disguised as a text file.',
  },
  {
    name: 'game_patch.zip',
    hash: '6512bd43d9caa6e02c990b0a82652dca',
    size: '5.6 MB',
    clues: {
      static: 'ZIP archive. Contains .exe and .dll files.',
      sandbox: 'Extracted .exe attempts to modify game files only.',
      hash: 'Hash not found in malware database.',
      code: 'No suspicious code in patch files.',
    },
    verdict: 'benign',
    explanation: 'A normal game patch archive. No malicious activity detected.',
  },
  {
    name: 'system_update.scr',
    hash: 'c20ad4d76fe97759aa27a0c99bff6710',
    size: '1.8 MB',
    clues: {
      static: 'Screen saver file. Contains PE executable.',
      sandbox: 'Attempts to download additional payloads.',
      hash: 'Hash found in malware database: Downloader.Agent',
      code: 'Code downloads and executes files from the internet.',
    },
    verdict: 'malicious',
    explanation: 'A downloader disguised as a screensaver. Attempts to fetch more malware.',
  },
  {
    name: 'presentation.pptx',
    hash: 'c51ce410c124a10e0db5e4b97fc2af39',
    size: '3.0 MB',
    clues: {
      static: 'PowerPoint file. No macros or embedded objects.',
      sandbox: 'Opens as a presentation. No network activity.',
      hash: 'Hash not found in malware database.',
      code: 'No executable code found.',
    },
    verdict: 'benign',
    explanation: 'A safe PowerPoint file with no suspicious features.',
  },
  {
    name: 'photo_viewer_setup.exe',
    hash: 'aab3238922bcc25a6f606eb525ffdc56',
    size: '2.9 MB',
    clues: {
      static: 'Installer for photo viewer. Contains string: "adware"',
      sandbox: 'Installs software and displays unwanted ads.',
      hash: 'Hash found in malware database: Adware.PhotoViewer',
      code: 'Code injects ads into browser.',
    },
    verdict: 'malicious',
    explanation: 'This installer is adware. It injects ads and is flagged by the hash check.',
  },
  {
    name: 'notes.txt',
    hash: '9bf31c7ff062936a96d3c8bd1f8f2ff3',
    size: '0.1 MB',
    clues: {
      static: 'Plain text file. No suspicious content.',
      sandbox: 'No activity. File opens in text editor.',
      hash: 'Hash not found in malware database.',
      code: 'No code present.',
    },
    verdict: 'benign',
    explanation: 'A harmless text file.',
  },
  {
    name: 'browser_extension.crx',
    hash: 'c74d97b01eae257e44aa9d5bade97baf',
    size: '0.7 MB',
    clues: {
      static: 'Chrome extension file. Contains string: "tracker"',
      sandbox: 'Injects tracking scripts into web pages.',
      hash: 'Hash found in malware database: PUP.TrackerExtension',
      code: 'Code injects tracking pixels and scripts.',
    },
    verdict: 'malicious',
    explanation: 'A potentially unwanted program (PUP) that tracks user activity.',
  },
];

const TOOLS = [
  { key: 'static', label: 'Run Static Scan', icon: <SearchIcon /> },
  { key: 'sandbox', label: 'Run in Sandbox', icon: <BugReportIcon /> },
  { key: 'hash', label: 'Check Hash', icon: <LockIcon /> },
  { key: 'code', label: 'View Code Snippet', icon: <CodeIcon /> },
];

function getRandomFiles(arr, n) {
  const shuffled = arr.slice().sort(() => 0.5 - Math.random());
  return shuffled.slice(0, n);
}

const MalwareAnalysisLabGame = () => {
  const [files, setFiles] = useState(() => getRandomFiles(FILES, 3));
  const [current, setCurrent] = useState(0);
  const [revealed, setRevealed] = useState([]); // which tools have been used for current file
  const [score, setScore] = useState(0);
  const [feedback, setFeedback] = useState(null);
  const [gameStatus, setGameStatus] = useState('playing');
  const [verdicts, setVerdicts] = useState([]); // track user verdicts

  const file = files[current];
  const progress = Math.round((current / files.length) * 100);

  const handleTool = (tool) => {
    if (!revealed.includes(tool)) {
      setRevealed([...revealed, tool]);
    }
  };

  const handleVerdict = (userVerdict) => {
    const isCorrect = userVerdict === file.verdict;
    setFeedback({
      type: isCorrect ? 'success' : 'error',
      message: isCorrect ? 'Correct!' : 'Incorrect!',
      explanation: file.explanation,
    });
    setVerdicts([...verdicts, { file: file.name, userVerdict, correct: isCorrect }]);
    if (isCorrect) setScore(score + 1);
    setTimeout(() => {
      if (current === files.length - 1) {
        setGameStatus('done');
      } else {
        setCurrent(current + 1);
        setRevealed([]);
        setFeedback(null);
      }
    }, 1800);
  };

  const resetGame = () => {
    setFiles(getRandomFiles(FILES, 3));
    setCurrent(0);
    setRevealed([]);
    setScore(0);
    setFeedback(null);
    setGameStatus('playing');
    setVerdicts([]);
  };

  const background = (
    <Box sx={{
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100vw',
      height: '100vh',
      zIndex: -2,
      background: 'linear-gradient(120deg, #ff512f 0%, #dd2476 100%)',
      backgroundImage: 'url(https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?auto=format&fit=crop&w=1500&q=80)',
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      filter: 'blur(2px) brightness(0.85)',
    }} />
  );

  if (gameStatus === 'done') {
    return (
      <Box className="game-container" sx={{ width: '100vw', height: '100vh', minWidth: '100vw', minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', position: 'relative', overflow: 'hidden', m: 0, p: 0 }}>
        {background}
        <Paper elevation={12} sx={{ ...glassStyle, maxWidth: 500, mx: 'auto', p: 4, borderRadius: 6, textAlign: 'center' }}>
          <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 2, color: '#dd2476' }}>
            Analysis Complete!
          </Typography>
          <CheckCircleIcon color="success" sx={{ fontSize: 48, mb: 1 }} />
          <Typography variant="h5" sx={{ mb: 2 }}>
            Final Score: {score} / {files.length}
          </Typography>
          <Typography variant="body1" sx={{ mb: 2, color: '#555' }}>
            <b>Your Verdicts:</b>
          </Typography>
          <ul style={{ textAlign: 'left', margin: '0 auto', maxWidth: 350 }}>
            {verdicts.map((v, idx) => (
              <li key={idx} style={{ marginBottom: 8 }}>
                <b>{v.file}:</b> {v.userVerdict.charAt(0).toUpperCase() + v.userVerdict.slice(1)} {v.correct ? <CheckCircleIcon color="success" fontSize="small" /> : <ErrorIcon color="error" fontSize="small" />} 
              </li>
            ))}
          </ul>
          <Button variant="contained" color="primary" onClick={resetGame} sx={{ mt: 2 }}>
            Analyze More Files
          </Button>
        </Paper>
      </Box>
    );
  }

  return (
    <Box className="game-container" sx={{ width: '100vw', height: '100vh', minWidth: '100vw', minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', position: 'relative', overflow: 'hidden', m: 0, p: 0 }}>
      {background}
      <Fade in timeout={500} key={current}>
        <Paper elevation={12} sx={{ ...glassStyle, maxWidth: 700, mx: 'auto', p: 4, borderRadius: 6 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
            <Typography color="primary" fontWeight="bold">
              File: {current + 1} / {files.length}
            </Typography>
            <Typography color="secondary" fontWeight="bold">
              Score: {score}
            </Typography>
            <LinearProgress variant="determinate" value={progress} sx={{ width: 200, height: 10, borderRadius: 5, backgroundColor: '#e3e3e3', '& .MuiLinearProgress-bar': { background: 'linear-gradient(90deg,#ff512f,#dd2476)' } }} />
          </Box>
          <Card elevation={6} sx={{ mb: 3, borderRadius: 4, background: 'rgba(255,255,255,0.95)', boxShadow: '0 4px 24px 0 rgba(60,72,88,0.12)' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 1, color: '#dd2476', fontWeight: 'bold' }}>{file.name}</Typography>
              <Typography variant="body2" sx={{ color: '#555' }}>Hash: {file.hash}</Typography>
              <Typography variant="body2" sx={{ color: '#555' }}>Size: {file.size}</Typography>
            </CardContent>
          </Card>
          <Grid container spacing={2} sx={{ mb: 2 }}>
            {TOOLS.map((tool) => (
              <Grid item xs={12} sm={6} md={3} key={tool.key}>
                <Button
                  variant={revealed.includes(tool.key) ? 'contained' : 'outlined'}
                  color="info"
                  onClick={() => handleTool(tool.key)}
                  fullWidth
                  sx={{ py: 1.5, fontWeight: 'bold', fontSize: 15, borderRadius: 2, boxShadow: 2, mb: 1 }}
                  startIcon={tool.icon}
                  disabled={!!feedback}
                >
                  {tool.label}
                </Button>
                {revealed.includes(tool.key) && (
                  <Alert severity="info" sx={{ mt: 1, fontSize: 15, borderRadius: 2, boxShadow: 1 }}>
                    {file.clues[tool.key]}
                  </Alert>
                )}
              </Grid>
            ))}
          </Grid>
          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 2 }}>
            <Button
              variant="contained"
              color="success"
              onClick={() => handleVerdict('benign')}
              sx={{ px: 4, py: 1.5, fontWeight: 'bold', fontSize: 16, borderRadius: 2, boxShadow: 2, background: 'linear-gradient(90deg,#43cea2,#185a9d)' }}
              disabled={!!feedback}
            >
              Benign
            </Button>
            <Button
              variant="contained"
              color="error"
              onClick={() => handleVerdict('malicious')}
              sx={{ px: 4, py: 1.5, fontWeight: 'bold', fontSize: 16, borderRadius: 2, boxShadow: 2, background: 'linear-gradient(90deg,#ff512f,#dd2476)' }}
              disabled={!!feedback}
            >
              Malicious
            </Button>
          </Box>
          {feedback && (
            <Fade in timeout={400}>
              <Alert severity={feedback.type} sx={{ my: 2, fontWeight: 'bold', fontSize: 18, borderRadius: 2, boxShadow: 1 }}>
                {feedback.message} {feedback.explanation}
              </Alert>
            </Fade>
          )}
        </Paper>
      </Fade>
    </Box>
  );
};

export default MalwareAnalysisLabGame; 